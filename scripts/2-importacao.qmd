---
title: "Tópico 2 - Importação de dados"
author: "Beatriz"
date: "`r Sys.Date()`"
lang: pt
---

## Importação

- O formato mais comum que utilizamos são os Dataframes.

- Possuem duas dimensões: linhas e colunas.

- Cada colunas pode ser de classes diferentes.

- Pense em uma tabela, como está acostumada a ver no Excel por exemplo. 

- Formatos comuns: CSV, excel, txt, entre outros.

- Importando CSV:

```{r}
library(readr)
dados_pnud <- read_csv2("../dados/base_pnud_min.csv")
```

- Importando excel:

```{r}
library(readxl)
pnud_excel <- read_excel("../dados/base_pnud.xlsx")
```

- Podemos usar o Import dataset do RStudio! O importante é salvar o código no script. Exemplo:

```{r}

```


Podemos também importar algumas bases diretamente da URL! 
Exemplo 1: Execução orçamentária da PMSP:

<http://orcamento.sf.prefeitura.sp.gov.br/orcamento/execucao.php>

```{r}

```


Exemplo 2: Mananciais

<https://beatrizmilz.github.io/mananciais/>

```{r}

```



Exercício: Importe a base `dicionario_base_pnud_min.csv`:

```{r}

```

## Padronizar nome das colunas

O pacote janitor tem várias funções para limpar bases de dados!

```{r}
library(janitor)

# exemplo:

# checar nome das colunas da base iris
names(iris)

# limpar nomes das colunas da base iris, e salvar em um objeto
# chamado iris_limpa
iris_limpa <- clean_names(iris)

# checar nome das colunas da base iris_limpa
names(iris_limpa)
```


## Salvando no computador

- Salvando os dados em um arquivo csv:

```{r}
write_csv2(dados_pnud, "../dados/salvando_base_pnud.csv")
```

- Salvando os dados em um arquivo excel:

```{r}
library(writexl)
write_xlsx(dados_pnud, "../dados/salvando_base_pnud.xlsx")
```

Exercício: Salve a base do dicionário dos dados do pnud com outro nome, por exemplo: `dicionario_pnud_output.csv`

```{r}

```


## Funções úteis para usar com dataframes

```{r}
# Retorna o número de colunas 
ncol(dados_pnud)

# Retorna o número de linhas
nrow(dados_pnud)

# Retorna o número de colunas e linhas
dim(dados_pnud)

# primeiras linhas
head(dados_pnud)

# dar uma "olhada" na base
library(dplyr)
glimpse(dados_pnud)
```


- Exercícios: Explore a base do dicionário do pnud. Quantas colunas tem? Quantas linhas tem? Quais informações essa pequena base apresenta?

```{r}

```



- Para selecionar colunas, utilize o `$`. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: `dados_pnud$ano`.


- Dica: após escrever o `nome_do_dataframe$`, aperte `tab` para que o RStudio faça sugestões de colunas da base.

- A função `unique()` retorna os valores únicos de um vetor. Exemplo: 

```{r}
unique(dados_pnud$ano)
```

Exercício: Use a função aprendida para criar um vetor com as siglas dos estados do Brasil.

```{r}
sort(unique(dados_pnud$uf_sigla))
```


## Funções básicas


|  Função |  O que retorna? |
|--:|--:|
|  `sum()` |  Soma  | 
|  `mean()` |  Média |
|  `median()` |  Mediana |
|  `var()` |  Variância (simples) |
|  `sd()` |  Desvio Padrão |
|  `max()` |  Valor máximo  |
|  `min()` |  Valor mínimo |
|  `round()` |  Valor arredondado |
|  `sqrt()` |  Raíz quadrada |


- Argumento importante: `na.rm = TRUE`

Somando do `vetor_com_na`:
```{r}
vetor_com_na <- c(NA, 1, 5, 2, 5, NA)
sum(vetor_com_na)
sum(vetor_com_na, na.rm = TRUE)
```

Calculando a média do `vetor_com_na`:
```{r}
mean(vetor_com_na)
mean(vetor_com_na, na.rm = TRUE)
```
